{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","elemnt","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","console","log","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAC5B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAYA,OACE,sBAAMC,SATa,SAACC,GACpBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAaP,GAAb,mBAA4BO,OAC1CN,EAAc,MAIhB,SACE,uBACEO,KAAK,OACLC,MAAOT,EACPU,SAhBoB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,a,+BCNdG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,0FAEkEC,UAAUH,GAF5E,sBAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KACRC,QAAQC,IAAIF,GACNG,EAAOH,EAAKI,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXZ,IAAG,UAAEU,EAAIG,cAAN,aAAE,EAAYC,iBAAiBd,QAVnB,kBAaZQ,GAbY,4CAAH,sDCEPO,EAAc,SAAC,GAAoB,EAAnBJ,GAAoB,IAAhBC,EAAe,EAAfA,MAAMZ,EAAS,EAATA,IAEnC,OACI,sBAAKgB,UAAU,yCAAf,UACA,qBAAKC,IAAKjB,EAAKkB,IAAKN,IACpB,4BAAIA,QCHCO,EAAU,SAAC,GAAkB,IAAhBrB,EAAe,EAAfA,SACxB,ECD0B,SAAEA,GAE1B,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNe,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAqBA,OAhBAC,qBAAW,WAEP1B,EAASC,GACJ0B,MAAM,SAAAC,GAEHH,EAAS,CACLjB,KAAMoB,EACNL,SAAS,SAItB,CAACtB,IAKGuB,EDtBeK,CAAa5B,GAA9BO,EAAP,EAAOA,KAAMe,EAAb,EAAaA,QAEb,OACE,qCACE,oBAAIJ,UAAU,oCAAd,SAAmDlB,IAClDsB,GAAW,2CACZ,qBAAKJ,UAAU,YAAf,SACGX,EAAKI,KAAI,SAACC,GAAD,OACR,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aETnBgB,EAAe,WAC1B,MAAoC3C,mBAAS,CAAC,cAA9C,mBAAO4C,EAAP,KAAmB7C,EAAnB,KAIA,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BACG6C,EAAWnB,KAAI,SAACX,GAAD,OACb,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,Y,MCXzB+B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.17ba4132.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport const AddCategory = ({ setCategories }) => {\n  const [inputValue, setInputValue] = useState(\"\");\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n  };\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    // setCategories = ([...setCategories,e])\n    if (inputValue.trim().length > 2) {\n      setCategories((elemnt) => [inputValue, ...elemnt ]);\n      setInputValue(\"\");\n    }\n  };\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        value={inputValue}\n        onChange={handleInputChange}\n      ></input>\n    </form>\n  );\n};\nAddCategory.propTypes = { setCategories: PropTypes.func.isRequired };\n","export const getGifs = async (category) => {\n    const url =\n      `https://api.giphy.com/v1/gifs/search?api_key=EbA0GSgcDQI2e9HHhzTQswtFHhlU8UW4&q=${encodeURI(category)}&limit=10`;\n    const resp = await fetch(url);\n    const { data } = await resp.json();\n    console.log(data);\n    const gifs = data.map((img) => {\n      return {\n        id: img.id,\n        title: img.title,\n        url: img.images?.downsized_medium.url,\n      };\n    });\n    return gifs;\n  };","import React from 'react'\n\nexport const GifGridItem = ({id, title,url}) => {\n    // console.log({id, title, url})\n    return (\n        <div className=\"card animate__animated animate__bounce\">\n        <img src={url} alt={title} />\n        <p>{title}</p>\n        </div>\n    )\n}\n","import React from \"react\";\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\nimport { GifGridItem } from \"./GifGridItem\";\n\nexport const GifGrid = ({ category }) => {\n  const {data, loading} = useFetchGifs(category);\n\n  return (\n    <>\n      <h3 className=\"animate__animated animate__bounce\">{category}</h3>\n      {loading && <p>Loading...</p>}\n      <div className=\"card-grid\">\n        {data.map((img) => (\n          <GifGridItem key={img.id} {...img} />\n        ))}\n      </div>\n    </>\n  );\n};\n","import { useState, useEffect } from 'react'\nimport { getGifs } from '../helpers/getGifs';\n\n\nexport const useFetchGifs = ( category ) => {\n    \n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect( () => {\n\n        getGifs( category )\n            .then( imgs => {\n                \n                setState({\n                    data: imgs,\n                    loading: false\n                });\n            })\n\n    }, [category])\n\n\n\n\n    return state; // { data:[], loading: true };\n\n\n}\n\n","import React, { useState } from \"react\";\nimport { AddCategory } from \"./components/AddCategory.js\";\nimport { GifGrid } from \"./components/GifGrid.js\";\n\nexport const GifExpertApp = () => {\n  const [categories, setCategories] = useState([\"One punch\"]);\n  //   const handleAdd = () => {\n  //     setCategories([...categories,'Ã±ero'])\n  //   };\n  return (\n    <>\n      <h2>GifExpertApp</h2>\n      <AddCategory setCategories={setCategories} />\n      <hr />\n      {/* <button onClick={handleAdd}>Agregar</button> */}\n      <ol>\n        {categories.map((category) => \n           <GifGrid key={category} category={category}/>\n        )}\n      </ol>\n    </>\n  );\n};\nexport default GifExpertApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {GifExpertApp} from './GifExpertApp.js'\nimport 'animate.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}